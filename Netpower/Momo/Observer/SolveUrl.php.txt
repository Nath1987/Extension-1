<?php

namespace Netpower\Momo\Observer;

use \Netpower\Momo\Services\Config;
use \Netpower\Momo\Services\Transport;

use \Netpower\Momo\Helper\TransferAllDataConfig;

use \Magento\Framework\UrlInterface;

use \Magento\Framework\App\ResponseFactory;

use \Magento\Checkout\Model\Session;

class SolveUrl implements \Magento\Framework\Event\ObserverInterface
{      

    /**
     * @var \Netpower\Momo\Services\Config
     */
    protected $_config;

    /**
     * @var \Netpower\Momo\Helper\TransferAllDataConfig
     */
    protected $_transfer;

    /**
     * @var \Netpower\Momo\Services\Transport
     */
    protected $_transport;

     /**
     * @var \Netpower\Momo\Services\UrlInterface
     */
    protected $_url;

    /**
     * @var \Magento\Framework\App\ResponseFactory
     */
    protected $_responseFactory;

    /**
     * @var \Magento\Checkout\Model\Session
     */
    protected $_session;

    /**
     * @param \Netpower\Momo\Services\Config $config
     * @param \Netpower\Momo\Helper\TransferAllDataConfig $transfer
     * @param \Netpower\Momo\Services\Transport $transport
     * @param \Magento\Framework\UrlInterface $url
     * @param \Magento\Framework\App\ResponseFactory $responseFactor
     * @param \Magento\Checkout\Model\Session $session
     */
    public function __construct(
        Config $config,
        TransferAllDataConfig $transfer,
        Transport $transport,
        UrlInterface $url,
        ResponseFactory $responseFactor,
        Session $session
    )
    {
        $this->_config = $config;
        $this->_transfer = $transfer;
        $this->_transport = $transport;
        $this->_url = $url;
        $this->_responseFactory = $responseFactor;
        $this->_session = $session;
    }

     /**
     * @param \Magento\Framework\Event\Observer $observer
     */
    public function execute(\Magento\Framework\Event\Observer $observer)
    {      
        $order = $observer->getEvent()->getOrder();

        $requestId = $orderId = time()."";

        $amount = $this->_transfer->getOrderTotal();

        $shippingAddress = $order->getShippingAddress();
        $firstname = $shippingAddress->getData('firstname');
        $lastname = $shippingAddress->getData('lastname');

        $amount = $amount*10000;
        $dataArray = [
            'amount' => (string)$amount,
            'requestId' => $requestId,
            'orderId' => $orderId,
            'extraData' => "firstname=$firstname;lastname=$lastname"
        ];

        $configValues = $this->_transfer->allDataApiRequire($dataArray);

        $dataSend = json_encode($configValues);

        $result =  $this->_transport->post('https://test-payment.momo.vn/gw_payment/transactionProcessor',$dataSend);

        $result = json_decode($result, true);

        $payUrl = $result['payUrl'];

        $this->_session->setPayUrl($payUrl);

        $redirectionUrl = $this->_url->getUrl('netpowermomo/testservice/configs');
        $this->_responseFactory->create()->setRedirect($redirectionUrl)->sendResponse();
            
        return $this;
    }
}

